# --- Main Frontend & Backend Services (fks.local) ---
server {
    listen 80;
    listen [::]:80;
    server_name fks.local; # Main frontend domain
    client_max_body_size 2G;

    # Security Headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    resolver 127.0.0.11 valid=30s;
    error_log /var/log/nginx/error.log debug; # Increased logging level

    # -------------------------------
    # Catch-All for the Main Frontend (NiceGUI)
    # -------------------------------
    location / {
        set $upstream_frontend "http://frontend:8588";
        proxy_pass $upstream_frontend;
        include /etc/nginx/includes/proxy_params.conf;
        
        # WebSocket settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
    }

    # -------------------------------
    # Route API requests (e.g., /api/...)
    # -------------------------------
    location /api/ {
        set $upstream_api "http://api:8000";
        rewrite ^/api(/.*)$ $1 break;
        include /etc/nginx/includes/proxy_params.conf;
        proxy_pass $upstream_api;
        proxy_read_timeout 300s;
    }

    # -------------------------------
    # Route Worker requests (e.g., /worker/...)
    # -------------------------------
    location /worker/ {
        set $upstream_worker "http://worker:8001";
        proxy_pass $upstream_worker;
        include /etc/nginx/includes/proxy_params.conf;
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_buffering on;
        proxy_buffer_size 64k;
        proxy_buffers 4 64k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 128k;
    }
    
    # -------------------------------
    # Route training requests (e.g., /training/...)
    # -------------------------------
    location /training/ {
        set $upstream_training "http://training:8088";
        proxy_pass $upstream_training;
        include /etc/nginx/includes/proxy_params.conf;
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_buffering on;
        proxy_buffer_size 64k;
        proxy_buffers 4 64k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 128k;
    }
    
    access_log /var/log/nginx/fks_access.log;
    error_log /var/log/nginx/fks_error.log warn;
}

# --- Monitoring and Metrics Services (metrics.fks.local) ---
server {
    listen 80;
    listen [::]:80;
    server_name metrics.fks.local;
    client_max_body_size 50M;

    # Security Headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    resolver 127.0.0.11 valid=30s;

    # -------------------------------
    # Grafana Dashboard
    # -------------------------------
    location / {
        set $upstream_grafana "http://grafana:3000";
        proxy_pass $upstream_grafana;
        include /etc/nginx/includes/proxy_params.conf;
        proxy_read_timeout 300s;
    }
    
    # -------------------------------
    # Prometheus
    # -------------------------------
    location /prometheus/ {
        set $upstream_prometheus "http://prometheus:9090";
        proxy_pass $upstream_prometheus;
        include /etc/nginx/includes/proxy_params.conf;
        proxy_read_timeout 300s;
    }
    
    # -------------------------------
    # Postgres Exporter
    # -------------------------------
    location /postgres-metrics/ {
        set $upstream_postgres_exporter "http://postgres-exporter:9187";
        rewrite ^/postgres-metrics/(.*)$ /$1 break;
        proxy_pass $upstream_postgres_exporter;
        include /etc/nginx/includes/proxy_params.conf;
    }
    
    # -------------------------------
    # Redis Exporter
    # -------------------------------
    location /redis-metrics/ {
        set $upstream_redis_exporter "http://redis-exporter:9121";
        rewrite ^/redis-metrics/(.*)$ /$1 break;
        proxy_pass $upstream_redis_exporter;
        include /etc/nginx/includes/proxy_params.conf;
    }

    # -------------------------------
    # Datadog
    # -------------------------------
    location /datadog/ {
        set $upstream_datadog "http://datadog-agent:8126";
        rewrite ^/datadog/(.*)$ /$1 break;
        proxy_pass $upstream_datadog;
        include /etc/nginx/includes/proxy_params.conf;
    }

    access_log /var/log/nginx/metrics_access.log;
    error_log /var/log/nginx/metrics_error.log warn;
}

# --- Database Admin Services (db.fks.local) ---
server {
    listen 80;
    listen [::]:80;
    server_name db.fks.local;
    
    # Security Headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    resolver 127.0.0.11 valid=30s;
    
    # -------------------------------
    # Postgres Service 
    # -------------------------------
    location /postgres/ {
        set $upstream_postgres "http://postgres:5432";
        proxy_pass $upstream_postgres;
        include /etc/nginx/includes/proxy_params.conf;
    }
    
    # -------------------------------
    # Redis Service
    # -------------------------------
    location /redis/ {
        set $upstream_redis "http://redis:6379";
        proxy_pass $upstream_redis;
        include /etc/nginx/includes/proxy_params.conf;
    }
    
    access_log /var/log/nginx/db_access.log;
    error_log /var/log/nginx/db_error.log warn;
}

# Following directives should be moved to the http context in nginx.conf
# or a separate file to be included in the http context

# --- Connection Upgrade Mapping for Websockets ---
# map $http_upgrade $connection_upgrade {
#     default upgrade;
#     '' close;
# }

# --- Define Cache & Expiry Mapping based on Content-Type ---
# map $sent_http_content_type $expires {
#     "text/html" 1h;
#     "text/html; charset=utf-8" 1h;
#     default off;
# }

# map $sent_http_content_type $cache_control {
#     "text/html" "public, max-age=3600";
#     "text/html; charset=utf-8" "public, max-age=3600";
#     default "public, max-age=3600";
# }